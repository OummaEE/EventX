
/**
 * EventX Email Service - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å EmailJS –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */

class EmailService {
    constructor() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EmailJS (–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏)
        this.serviceId = 'service_eventx';
        this.templateId = 'template_booking';
        this.publicKey = 'your_public_key_here';
        this.isInitialized = false;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EmailJS
    init() {
        try {
            // emailjs.init(this.publicKey);
            this.isInitialized = true;
            console.log('üìß EmailJS initialized');
        } catch (error) {
            console.error('EmailJS initialization failed:', error);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    async sendBookingNotification(booking, user) {
        const templateParams = {
            to_email: 'info@eventx.nu',
            subject: `Ny bokning - ${booking.service}`,
            user_name: user.name,
            user_email: user.email,
            user_phone: user.phone,
            booking_id: booking.id,
            service: booking.service,
            date: this.formatDate(booking.date),
            time: booking.time,
            participants: booking.participants,
            total_price: `${booking.totalPrice} SEK`,
            created_at: this.formatDateTime(booking.createdAt),
            message: `
Ny bokning har skapats i EventX appen:

Bokningsdetaljer:
- Boknings-ID: ${booking.id}
- Tj√§nst: ${booking.service}
- Datum: ${this.formatDate(booking.date)}
- Tid: ${booking.time}
- Antal deltagare: ${booking.participants}
- Totalpris: ${booking.totalPrice} SEK

Kunduppgifter:
- Namn: ${user.name}
- Email: ${user.email}
- Telefon: ${user.phone}

Bokningen √§r skapad: ${this.formatDateTime(booking.createdAt)}
            `
        };

        return this.sendEmail(templateParams, 'admin');
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
    async sendCustomerConfirmation(booking, user) {
        const timeUntil = this.getTimeUntilEvent(booking.eventDateTime);

        const templateParams = {
            to_email: user.email,
            subject: `Bokningsbekr√§ftelse - ${booking.service}`,
            user_name: user.name,
            booking_id: booking.id,
            service: booking.service,
            date: this.formatDate(booking.date),
            time: booking.time,
            participants: booking.participants,
            total_price: `${booking.totalPrice} SEK`,
            time_until: timeUntil.text,
            message: `
Hej ${user.name}!

Tack f√∂r din bokning hos EventX! H√§r √§r din bokningsbekr√§ftelse:

üìÖ ${booking.service}
üìç Datum: ${this.formatDate(booking.date)}
üïê Tid: ${booking.time}
üë• Deltagare: ${booking.participants} personer
üí∞ Totalpris: ${booking.totalPrice} SEK
üîñ Boknings-ID: ${booking.id}

‚è∞ ${timeUntil.text}

Vi kommer att kontakta dig senast 24 timmar f√∂re evenemanget med ytterligare information.

Har du fr√•gor? Kontakta oss:
üìß info@eventx.nu
üì± 073 521 40 77

Vi ser fram emot att tr√§ffa dig!

Mvh,
EventX Team
            `
        };

        return this.sendEmail(templateParams, 'customer');
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å –¥–æ —Å–æ–±—ã—Ç–∏—è
    async sendReminder(booking, user) {
        const templateParams = {
            to_email: user.email,
            subject: `P√•minnelse - ${booking.service} imorgon!`,
            user_name: user.name,
            booking_id: booking.id,
            service: booking.service,
            date: this.formatDate(booking.date),
            time: booking.time,
            message: `
Hej ${user.name}!

P√•minnelse om din EventX-bokning imorgon:

üìÖ ${booking.service}
üìç Datum: ${this.formatDate(booking.date)}
üïê Tid: ${booking.time}
üë• Deltagare: ${booking.participants} personer
üîñ Boknings-ID: ${booking.id}

Praktisk information:
- Kom 15 minuter f√∂re angiven tid
- Ha p√• er bekv√§ma kl√§der
- Mobiler kommer att f√∂rvaras s√§kert under aktiviteten

Vi ser fram emot att tr√§ffa er imorgon!

Mvh,
EventX Team
            `
        };

        return this.sendEmail(templateParams, 'reminder');
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    async sendEmail(templateParams, type) {
        try {
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –ª–æ–≥–∏—Ä—É–µ–º –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            console.log(`üìß [${type.toUpperCase()}] Email would be sent:`, templateParams);

            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
            // const response = await emailjs.send(this.serviceId, this.templateId, templateParams);

            // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            const response = {
                status: 200,
                text: 'Email sent successfully'
            };

            if (response.status === 200) {
                console.log(`‚úÖ ${type} email sent successfully`);
                return { success: true, message: 'Email skickat!' };
            }

        } catch (error) {
            console.error(`‚ùå Failed to send ${type} email:`, error);
            return { success: false, error: error.message };
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    formatDate(dateStr) {
        const date = new Date(dateStr);
        return date.toLocaleDateString('sv-SE', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    formatDateTime(dateTimeStr) {
        const date = new Date(dateTimeStr);
        return date.toLocaleString('sv-SE', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–æ–±—ã—Ç–∏—è
    getTimeUntilEvent(eventDateTime) {
        const now = new Date();
        const eventDate = new Date(eventDateTime);
        const timeDiff = eventDate - now;

        if (timeDiff < 0) {
            return { status: 'completed', text: 'Evenemanget har genomf√∂rts' };
        }

        const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));

        if (days > 1) {
            return { status: 'upcoming', text: `${days} dagar kvar` };
        } else if (days === 1) {
            return { status: 'tomorrow', text: 'Imorgon!' };
        } else {
            const hours = Math.floor(timeDiff / (1000 * 60 * 60));
            return { status: 'today', text: `${hours} timmar kvar` };
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    setupReminders() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
        setInterval(() => {
            this.checkUpcomingBookings();
        }, 60 * 60 * 1000); // 1 —á–∞—Å
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    async checkUpcomingBookings() {
        if (typeof userSystem === 'undefined') return;

        const bookings = userSystem.getUserBookings();
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);

        for (const booking of bookings) {
            const eventDate = new Date(booking.eventDateTime);
            const timeDiff = Math.abs(eventDate - tomorrow);

            // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤—Ç—Ä–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2 —á–∞—Å–æ–≤)
            if (timeDiff < 2 * 60 * 60 * 1000 && !booking.reminderSent) {
                await this.sendReminder(booking, userSystem.getCurrentUser());
                booking.reminderSent = true;
                userSystem.saveBookings();
            }
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
const emailService = new EmailService();
emailService.init();

// Export –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = EmailService;
}
